/*jslint white: true */
/*global
chrome, document, $, CONTRAST_SERVICE_KEY, 
TEAMSERVER_URL, CONTRAST_ORG_UUID, getOrganizationVulnerabilityesIds, 
getVulnerabilityShort,
SEVERITY_NOTE,
SEVERITY_LOW,
SEVERITY_MEDIUM,
SEVERITY_HIGH,
SEVERITY_CRITICAL,
SEVERITY_NOTE_ICON_PATH,
SEVERITY_LOW_ICON_PATH,
SEVERITY_MEDIUM_ICON_PATH,
SEVERITY_HIGH_ICON_PATH,
SEVERITY_CRITICAL_ICON_PATH,
getVulnerabilityTeamserverUrl
*/

function populateVulnerabilitySection(traces, teamserverUrl, orgUuid) {
    "use strict";
    if (traces.length > 0) {
        traces.forEach(function (element) {
            getVulnerabilityShort(element, function () {
                return function (e) {
                    var xhr = e.currentTarget;
                    if (xhr.readyState === 4) {
                        if (xhr.responseText !== "") {
                            var json = JSON.parse(xhr.responseText),
                                trace = json.trace,
                                li = $('<li/>')
                                    .addClass('list-group-item')
                                    .appendTo($("#vulnerabilities-found-on-page-list"));

                            li.append($('<a/>').attr("href", "").addClass('vulnerability-rule-name').append(trace.ruleName).click(function (event) {
                                var text = $(event.target).parent().find('.vulnerability-uuid').text(),
                                    completeUrl = getVulnerabilityTeamserverUrl(teamserverUrl, orgUuid, text);
                                chrome.tabs.create({ url: completeUrl });
                            }));

                            switch (trace.severity) {
                                case SEVERITY_NOTE:
                                    li.append($('<br/>'));
                                    li.append($('<img/>').attr("src", SEVERITY_NOTE_ICON_PATH));
                                    break;
                                case SEVERITY_LOW:
                                    li.append($('<br/>'));
                                    li.append($('<img/>').attr("src", SEVERITY_LOW_ICON_PATH));
                                    break;
                                case SEVERITY_MEDIUM:
                                    li.append($('<br/>'));
                                    li.append($('<img/>').attr("src", SEVERITY_MEDIUM_ICON_PATH));
                                    break;
                                case SEVERITY_HIGH:
                                    li.append($('<br/>'));
                                    li.append($('<img/>').attr("src", SEVERITY_HIGH_ICON_PATH));
                                    break;
                                case SEVERITY_CRITICAL:
                                    li.append($('<br/>'));
                                    li.append($('<img/>').attr("src", SEVERITY_CRITICAL_ICON_PATH));
                                    break;
                                default:

                            }

                            li.append($('<h6/>').addClass('vulnerability-uuid').append(trace.uuid).hide());

                            var date = new Date(null);
                            date.setMilliseconds(trace.first_time_seen);
                            var dateVal = date.toString();

                            li.append($('<h6/>').addClass('color-gray').append("First Detected: " + dateVal));
                            li.append($('<h6/>').addClass('color-gray').append("Status: " + trace.status));
                        }
                    }
                };
            });

        });
    }
}

document.addEventListener('DOMContentLoaded', function () {
    "use strict";
    chrome.storage.sync.get([CONTRAST_SERVICE_KEY, TEAMSERVER_URL, CONTRAST_ORG_UUID], function (items) {

        if (items[CONTRAST_SERVICE_KEY] !== null) {

            chrome.tabs.query({ 'active': true, 'lastFocusedWindow': true }, function (tabs) {
                var url = tabs[0].url;

                getOrganizationVulnerabilityesIds(url, function () {
                    return function (e) {
                        var xhr = e.currentTarget;
                        if (xhr.readyState === 4) {
                            if (xhr.responseText !== "") {
                                var json = JSON.parse(xhr.responseText),
                                    traces = json.traces;
                                if (traces.length > 0) {
                                    $("#vulnerabilities-on-page").show();
                                    populateVulnerabilitySection(traces, items[TEAMSERVER_URL], items[CONTRAST_ORG_UUID]);
                                }
                            }
                        }
                    }
                        ;
                });
            });
        }
    });
}, false);
