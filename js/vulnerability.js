/*global
chrome, document, $, CONTRAST_SERVICE_KEY, 
TEAMSERVER_URL, CONTRAST_ORG_UUID, getOrganizationVulnerabilityesIds, 
getVulnerabilityShort,
SEVERITY_NOTE,
SEVERITY_LOW,
SEVERITY_MEDIUM,
SEVERITY_HIGH,
SEVERITY_CRITICAL,
SEVERITY_NOTE_ICON_PATH,
SEVERITY_LOW_ICON_PATH,
SEVERITY_MEDIUM_ICON_PATH,
SEVERITY_HIGH_ICON_PATH,
SEVERITY_CRITICAL_ICON_PATH,
getVulnerabilityTeamserverUrl,
HTML_BODY,
CONTRAST_USERNAME,
CONTRAST_API_KEY
*/

function populateVulnerabilitySection(traces, teamserverUrl, orgUuid) {
    "use strict";
    if (traces.length > 0) {
        traces.forEach(function (element) {
            getVulnerabilityShort(element, function () {
                return function (e) {
                    var xhr = e.currentTarget, json, trace, li;
                    if (xhr.readyState === 4 && xhr.responseText !== "") {
                        json = JSON.parse(xhr.responseText);
                        trace = json.trace;

                        li = $('<li/>')
                            .addClass('list-group-item no-border')
                            .appendTo($("#vulnerabilities-found-on-page-list"));

                        switch (trace.severity) {
                            case SEVERITY_NOTE:
                                li.append($('<img/>').attr("src", SEVERITY_NOTE_ICON_PATH));
                                break;
                            case SEVERITY_LOW:
                                li.append($('<img/>').attr("src", SEVERITY_LOW_ICON_PATH));
                                break;
                            case SEVERITY_MEDIUM:
                                li.append($('<img/>').attr("src", SEVERITY_MEDIUM_ICON_PATH));
                                break;
                            case SEVERITY_HIGH:
                                li.append($('<img/>').attr("src", SEVERITY_HIGH_ICON_PATH));
                                break;
                            case SEVERITY_CRITICAL:
                                li.append($('<img/>').attr("src", SEVERITY_CRITICAL_ICON_PATH));
                                break;
                            default:
                                break;
                        }

                        li.append($('<h6/>').addClass('vulnerability-uuid').append(trace.uuid).hide());

                        li.append($('<a/>').attr("href", "").addClass('vulnerability-rule-name').append(" " + trace.ruleName).click(function (event) {
                            var text = $(event.target).parent().find('.vulnerability-uuid').text(),
                                completeUrl = getVulnerabilityTeamserverUrl(teamserverUrl, orgUuid, text);
                            chrome.tabs.create({ url: completeUrl });
                        }));

                    }
                };
            });

        });
    }
}

document.addEventListener('DOMContentLoaded', function () {
    "use strict";
    chrome.storage.sync.get([CONTRAST_USERNAME, CONTRAST_SERVICE_KEY, TEAMSERVER_URL, CONTRAST_ORG_UUID, CONTRAST_API_KEY], function (items) {

        // check if any values are undefined
        var noUsername = items.contrast_username === undefined || items.contrast_username === '',
            noServiceKey = items.contrast_service_key === undefined || items.contrast_service_key === '',
            noApiKey = items.contrast_api_key === undefined || items.contrast_api_key === '',
            noTeamserverUrl = items.teamserver_url === undefined || items.teamserver_url === '',
            needsCredentials = noUsername || noServiceKey || noApiKey || noTeamserverUrl;

        if (!needsCredentials) {

            chrome.tabs.query({ 'active': true, 'lastFocusedWindow': true }, function (tabs) {
                if (tabs[0] !== undefined) {
                    var url = tabs[0].url;

                    getOrganizationVulnerabilityesIds(url, function () {
                        return function (e) {
                            var xhr = e.currentTarget, json, traces;
                            if (xhr.readyState === 4) {

                                if (xhr.status === 403 || xhr.status === 0 || xhr.responseText === "") {
                                    //Configuration problem
                                    $(HTML_BODY).addClass("configuration-problem");
                                    $("#no-results").show();
                                    $("#configuration-problem").show();
                                    $("#vulnerabilities").hide();
                                } else {
                                    $("#no-results").hide();
                                    $("#vulnerabilities").show();
                                    json = JSON.parse(xhr.responseText);
                                    traces = json.traces;

                                    if (traces === undefined || traces.length === 0) {
                                        $("#no-vulnerabilities-found-on-page").show();
                                        $("#vulnerabilities-found-on-page").hide();
                                    } else {
                                        $("#no-vulnerabilities-found-on-page").hide();
                                        $("#vulnerabilities-found-on-page").show();
                                        populateVulnerabilitySection(traces, items[TEAMSERVER_URL], items[CONTRAST_ORG_UUID]);
                                    }
                                }
                            }
                        };
                    });
                }
            });
        }
    });
}, false);
