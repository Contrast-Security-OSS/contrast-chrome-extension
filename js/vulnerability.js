/*global
chrome,
document,
Helpers,
*/

import { getStorageVulnsAndRender } from './vulnerabilityMethods.js';
const {
  STORED_APPS_KEY,
  getStoredCredentials,
  isCredentialed,
  getHostFromUrl,
} = Helpers;

document.addEventListener('DOMContentLoaded', () => {
  chrome.storage.local.get([STORED_APPS_KEY, CONTRAST__STORED_APP_LIBS], (result) => {
    chrome.tabs.query({ active: true, lastFocusedWindow: true }, (tabs) => {
      if (!tabs[0]) return;

      const url    = new URL(tabs[0].url);
      const host   = getHostFromUrl(url);
      const appKey = "APP_LIBS__ID_" + appHost;

      if (!!result[STORED_APPS_KEY] && result[STORED_APPS_KEY].filter(app => app[host])[0]) {
        getStoredCredentials()
        .then(items => {
          if (isCredentialed(items)) {
            getStorageVulnsAndRender(items);
            renderVulnerableLibraries(result[CONTRAST__STORED_APP_LIBS][appKey])
          } else {
            throw new Error("Not Credentialed")
          }
        })
        .catch(error => new Error(error));
      }
    });
  });
}, false);


function renderVulnerableLibraries(applicationLibraries) {
  if (!applicationLibraries || !applicationLibraries.libraries) return;
  const libraries = applicationLibraries.libraries;



}
