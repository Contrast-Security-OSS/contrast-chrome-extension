class Library{constructor(r,t){this.GET_LIB_VERSION="GET_LIB_VERSION",this.tab=r,this.library=t,this.extractor=null}_setExtrator(r){this.extractor=r}_setLibraryVersion(r){this.library.version=r}createVersionedLibrary(){return this.library.extractors&&this.library.extractors.func?(this._setExtrator(this.library.extractors.func[0]),this._extractLibraryVersion()):new Promise(r=>r(this.library))}_extractLibraryVersion(){return new Promise((r,t)=>{const{library:e,tab:i}=this;this._executeExtractionScript().then(t=>{chrome.tabs.sendMessage(i.id,{action:this.GET_LIB_VERSION,library:e},t=>{t?(this._setLibraryVersion(t),r(e)):(this._setLibraryVersion(this._getVersionFromFileName(e.jsFileName)),r(e))})}).catch(r=>{t(r)})})}_getVersionFromFileName(r){const t=r.match(/\b\d+(?:\.\d+)*\b/);return t?t[0]:null}_executeExtractionScript(){return new Promise(r=>{const{extractor:t,library:e,tab:i}=this,s={code:this._generateScriptTags({extractor:t,library:e})};chrome.tabs.executeScript(i.id,s,t=>{r(!!t)})})}_generateScriptTags(){const{extractor:r}=this;if(!this.library.parsedLibName||!r)return null;const t=this.library.parsedLibName.replace("-","_");return`try {\n        var script${t} = document.createElement('script');\n        var scriptRes${t} = document.createElement('span');\n        script${t}.innerHTML = \`${`\n    try {\n      var _c_res${t} = ${r};\n      var __docRes${t} = document.getElementById('__script_res_${t}');\n      __docRes${t}.innerText = _c_res${t};\n    } catch (e) {\n      // console.log(e) // error getting libraries\n    }`}\`;\n        const elId_${t} = '__script_res_${t}'\n        const el_${t} = document.getElementById(elId_${t});\n        if (!el_${t}) {\n          scriptRes${t}.setAttribute('id', elId_${t});\n          document.body.appendChild(scriptRes${t});\n          document.body.appendChild(script${t});\n          scriptRes${t}.style.display = 'none';\n        }\n      } catch (e) {}`}}export default Library;