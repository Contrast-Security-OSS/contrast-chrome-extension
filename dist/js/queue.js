import{isBlacklisted,removeLoadingBadge,deDupeArray}from"./util.js";import Vulnerability from"./models/Vulnerability.js";class Queue{constructor(){this.xhrRequests=[],this.gatheredForms=[],this.traceIDs=[],this.xhrReady=!1,this.formsReady=!1,this.isCredentialed=!1,this.tab=null,this.application=null,this.tabUrl="",this.executionCount=0}addXHRequests(t,e){this.xhrReady=e,this.xhrRequests=this.xhrRequests.concat(t)}addForms(t,e){this.formsReady=e,this.gatheredForms=this.gatheredForms.concat(t)}setTab(t){if(!t.url)throw new Error("Tab URL is falsey, received",t.url);this.tab=t,this.tabUrl=t.url}setApplication(t){this.application=t}setCredentialed(t){this.isCredentialed=t}_increaseExecutionCount(){this.executionCount+=1}resetExecutionCount(){this.executionCount=0}_highLightVulnerableForms(t){const e=t.map(t=>!!(t.traces&&t.traces.length>0)&&t.action).filter(Boolean);Vulnerability.highlightForms(this.tab,e)}_evaluateForms(){return Vulnerability.evaluateFormActions(this.gatheredForms,this.tab,this.application)}async executeQueue(t){const e=this.tabUrl||this.tab.url;if(isBlacklisted(e))return void removeLoadingBadge(this.tab);if(![this.xhrReady,this.formsReady,this.tab,this.tabUrl,this.isCredentialed,this.application].every(Boolean))return;await Vulnerability.removeVulnerabilitiesFromStorage(this.tab);const i=await this._evaluateForms();i&&i.length>0&&this._highLightVulnerableForms(i);let s=this.xhrRequests.concat([this.tabUrl]);s=(s=s.filter(t=>!isBlacklisted(t))).map(t=>new URL(t).pathname),Vulnerability.evaluateVulnerabilities(this.isCredentialed,this.tab,deDupeArray(s),this.application,i?i.map(t=>t.traces).flatten():[],t),this._increaseExecutionCount()}}export default Queue;