import{CONTRAST_RED,CONTRAST_GREEN,STORED_TRACES_KEY,HIGHLIGHT_VULNERABLE_FORMS,updateTabBadge,updateExtensionIcon,deDupeArray,generateTraceURLString,getOrganizationVulnerabilityIds}from"../util.js";import VulnerableTab from"./VulnerableTab.js";function Vulnerability(){}function isTooLong(e){return e.length>2e3||0===e.length}Vulnerability.evaluateVulnerabilities=function(e,a,r,t,n,i){const o=generateTraceURLString(r);isTooLong(o,r)||t&&t.id&&getOrganizationVulnerabilityIds(o,t.id).then(e=>{if(!e||!e.traces)throw updateExtensionIcon(a,1),updateTabBadge(a,"",CONTRAST_GREEN),new Error("Error getting json from app trace ids");this.storeTraces(deDupeArray(e.traces.concat(n)),a,t,i)}).catch(e=>{updateExtensionIcon(a,1),updateTabBadge(a,"!",CONTRAST_RED),console.error("Error getting organization vulnerability ids",e)})},Vulnerability.evaluateFormActions=async function(e,a,r){if(!e||0===e.length)return[];const t=e.map(e=>new URL(e).pathname).map(e=>generateTraceURLString([e])).map(e=>getOrganizationVulnerabilityIds(e,r.id));return(await Promise.all(t)).map((a,r)=>(a.action=e[r],a))},Vulnerability.evaluateSingleURL=async function(e,a,r){const t=new URL(e).pathname,n=generateTraceURLString([t]),i=await getOrganizationVulnerabilityIds(n,r.id);i&&i.traces&&this.storeTraces(i.traces,a,r)},Vulnerability.highlightForms=function(e,a){chrome.tabs.sendMessage(e.id,{action:HIGHLIGHT_VULNERABLE_FORMS,formActions:a})},Vulnerability.storeTraces=async function(e,a,r,t=null){const n=VulnerableTab.buildTabPath(a.url),i=new VulnerableTab(n,r.name,e);let o=await i.getStoredTab();if(o&&o[i.vulnTabId]&&Array.isArray(o[i.vulnTabId])){const a=o[i.vulnTabId].concat(e);i.setTraceIDs(a)}else if(o&&o[i.vulnTabId]&&!Array.isArray(o[i.vulnTabId]))throw new Error("Vulnerabilities not stored properly, should have received array.");o=await i.storeTab();try{updateExtensionIcon(a,0),updateTabBadge(a,o[i.vulnTabId].length.toString(),CONTRAST_RED)}catch(e){}t&&t()},Vulnerability.removeVulnerabilitiesFromStorage=function(){return new Promise((e,a)=>{chrome.storage.local.remove(STORED_TRACES_KEY,()=>{chrome.runtime.lastError&&a(new Error(chrome.runtime.lastError)),e()})})};export default Vulnerability;