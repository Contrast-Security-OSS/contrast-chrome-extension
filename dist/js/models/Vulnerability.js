import{CONTRAST_RED,CONTRAST_GREEN,STORED_TRACES_KEY,HIGHLIGHT_VULNERABLE_FORMS,updateTabBadge,updateExtensionIcon,deDupeArray,generateTraceURLString,getOrganizationVulnerabilityIds}from"../util.js";import VulnerableTab from"./VulnerableTab.js";function Vulnerability(){}function isTooLong(e){return e.length>2e3||0===e.length}Vulnerability.evaluateVulnerabilities=function(e,r,a,t,n,i){const o=generateTraceURLString(a);isTooLong(o,a)||getOrganizationVulnerabilityIds(o,t.id).then(e=>{if(!e||!e.traces)throw updateExtensionIcon(r,1),updateTabBadge(r,"",CONTRAST_GREEN),new Error("Error getting json from app trace ids");this.storeTraces(deDupeArray(e.traces.concat(n)),r,t,i)}).catch(()=>{throw updateExtensionIcon(r,1),updateTabBadge(r,"!",CONTRAST_RED),new Error("Error getting organization vulnerability ids")})},Vulnerability.evaluateFormActions=async function(e,r,a){if(!e||0===e.length)return[];const t=e.map(e=>new URL(e).pathname).map(e=>generateTraceURLString([e])).map(e=>getOrganizationVulnerabilityIds(e,a.id));return(await Promise.all(t)).map((r,a)=>(r.action=e[a],r))},Vulnerability.evaluateSingleURL=async function(e,r,a){const t=new URL(e).pathname,n=generateTraceURLString([t]),i=await getOrganizationVulnerabilityIds(n,a.id);i&&i.traces&&this.storeTraces(i.traces,r,a)},Vulnerability.highlightForms=function(e,r){chrome.tabs.sendMessage(e.id,{action:HIGHLIGHT_VULNERABLE_FORMS,formActions:r})},Vulnerability.storeTraces=async function(e,r,a,t=null){const n=VulnerableTab.buildTabPath(r.url),i=new VulnerableTab(n,a.name,e);let o=await i.getStoredTab();if(o&&o[i.vulnTabId]&&Array.isArray(o[i.vulnTabId])){const r=o[i.vulnTabId].concat(e);i.setTraceIDs(r)}else if(o&&o[i.vulnTabId]&&!Array.isArray(o[i.vulnTabId]))throw new Error("Vulnerabilities not stored properly, should have received array.");o=await i.storeTab();try{updateExtensionIcon(r,0),updateTabBadge(r,o[i.vulnTabId].length.toString(),CONTRAST_RED)}catch(e){}t&&t()},Vulnerability.removeVulnerabilitiesFromStorage=function(){return new Promise((e,r)=>{chrome.storage.local.remove(STORED_TRACES_KEY,()=>{chrome.runtime.lastError&&r(new Error(chrome.runtime.lastError)),e()})})};export default Vulnerability;