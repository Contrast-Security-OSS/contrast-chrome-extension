const chrome   = require('sinon-chrome/extensions');
const jsdom    = require("jsdom");
const testData = require("../testData")
const sinon    = require("sinon");
const chai     = require("chai");
const assert   = chai.assert;

const { JSDOM } = jsdom;

const {
  returnShortTraceData,
  returnShortTraceDataLowSeverity,
} = testData;

const vulnMethods = require('../../js/vulnerability-methods')
let {
  renderListItem,
  populateVulnerabilitySection,
  getStorageVulnsAndRender,
} = vulnMethods;

const util = require("../../js/util");
let {
  setElementDisplay,
  setElementText,
} = util;

/**
* Array.prototype.flatten - reduce multi-dimensional arrays to single dimension
*
* add the .flatten() method to Array instances
* the empty array is the initial value of the new array
*
* @return {Array}
*/
Array.prototype.flatten = function() {
  return this.reduce((newArray, val) => newArray.concat(val), []);
}


/**
* String.prototype.titleize - capitalize the first letter of each word in a string, regardless of special characters
* https://stackoverflow.com/a/6251509/6410635
* https://stackoverflow.com/a/196991/6410635
*
* @return {String} titleized string
*/
String.prototype.titleize = function() {
  return this.replace(/\b([a-z])/g, function(captured) {
    return captured.charAt(0).toUpperCase() + captured.substr(1).toLowerCase();
  });
}


describe('test how vulnerabilities are rendered to user', () => {

  // set jsdom document as node js global
  global.document = (new JSDOM(
    `<!DOCTYPE html><html><head></head><body></body></html>`
  )).window.document;

  const container = document.createElement('ul');
  const noVulns   = document.createElement('div').setAttribute('id', 'no-vulnerabilities-found');
  const vulnsOnPg = document.createElement('div').setAttribute('id', 'vulnerabilities-found-on-page');

  document.children[0].appendChild(container);
  container.setAttribute('id', 'vulnerabilities-found-on-page-list');
  container.style.display = 'none';

  let child;

  beforeEach(() => {
    global.chrome = chrome;

    if (!!container.children.length > 0) {
      container.children[0].parentNode.removeChild(container.children[0]);
    } else {
      renderListItem(returnShortTraceData, "teamserverURL", "org uuid");
      child = container.children[0];
    }
    chrome.runtime.sendMessage.flush();
  })

  afterEach(() => {
    if (!!container.children.length > 0) {
      container.children[0].parentNode.removeChild(container.children[0]);
    }
    chrome.flush();
    delete global.chrome;
  });

  it('renders a number of vulnerabilities equal to the number of traces provided', () => {
    assert.equal(container.children.length, 1);
    assert.equal(child.tagName, "LI");
    assert.equal(child.className, "list-group-item no-border vulnerability-li vuln-1");
    assert.equal(child.children.length, 2);
  });

  it('navigates to teamserver when a vulnerability is clicked', () => {
    chrome.tabs.create = sinon.spy();
    const anchor = child.getElementsByTagName('a')[0];
    anchor.click();
    assert.ok(chrome.tabs.create.calledOnce);
  });

  it('orders the rendered vulnerabilities by severity', () => {
    assert.equal(container.children.length, 1);
    renderListItem(returnShortTraceDataLowSeverity, "teamserverURL", "org-uuid")
    assert.equal(container.children.length, 2);

    const child1 = container.children[1];

    assert.ok(child.getElementsByTagName('img')[0].src.includes("critical"));
    assert.ok(child1.getElementsByTagName('img')[0].src.includes("low"));
  });

  it('requests stored traces from background', () => {
    chrome.runtime.sendMessage = sinon.spy();
    getStorageVulnsAndRender({
      teamserver_url: "url",
      contrast_org_uuid: "uuid"
    });
    assert.ok(chrome.runtime.sendMessage.calledOnce);
  });

  it('shows no vulnerabilities found if trace request returns an empty list', () => {
    getStorageVulnsAndRender = sinon.stub();

    chrome.runtime.sendMessage.yields({ traces: [] });
    getStorageVulnsAndRender.callsFake(function() {
      chrome.runtime.sendMessage(response => {
        assert.isTrue(Array.isArray(response.traces))
        assert.isTrue(response.traces.length === 0)
      })
    })

    getStorageVulnsAndRender({
      teamserver_url: "url",
      contrast_org_uuid: "uuid"
    })

    assert.isTrue(chrome.runtime.sendMessage.calledOnce)
    assert.isTrue(chrome.runtime.sendMessage.calledWith())
  });


});
