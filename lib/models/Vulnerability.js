'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _util = require('../util.js');

var _background = require('../background.js');

var _VulnerableTab = require('./VulnerableTab.js');

var _VulnerableTab2 = _interopRequireDefault(_VulnerableTab);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Vulnerability() {}

// NOTE: URL Length Maximum - https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
// NOTE: If urlQueryString length is 0 it will return all app trace ids
function isTooLong(queryString, traceUrls) {
  if (queryString.length > 2000 || queryString.length === 0) {
    return true;
  };
  return false;
}

/**
 * evaluateVulnerabilities - method used by tab url, xhr and form actions to check TS for vulnerabilities
 *
 * @param  {Boolean} hasCredentials if the user has credentialed the extension
 * @param  {Object}  tab            Gives the state of the current tab
 * @param  {Array}   traceUrls     the urls that will be queried to TS
 * @return {void}
 */
Vulnerability.evaluateVulnerabilities = function (hasCredentials, tab, traceUrls, application) {
  var _this = this;

  var urlQueryString = (0, _util.generateTraceURLString)(traceUrls);
  if (isTooLong(urlQueryString, traceUrls)) return;

  // console.log("URL Length was fine, received " + traceUrls.length + " traces and qs length was " + urlQueryString.length);

  (0, _util.getOrganizationVulnerabilityIds)(urlQueryString, application.id).then(function (json) {
    if (!json || !json.traces) {
      (0, _util.updateTabBadge)(tab, '', _util.CONTRAST_GREEN);
      throw new Error("Error getting json from app trace ids");
    }
    // this.highlightForms(traceUrls);
    _this.storeTraces(json.traces, tab, application, _background.resetXHRRequests);
  }).catch(function (error) {
    console.log(error);
    (0, _util.updateTabBadge)(tab, "X", _util.CONTRAST_RED);
    throw new Error("Error getting organization vulnerability ids");
  });
};

Vulnerability.evaluateSingleURL = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(url, tab, application) {
    var path, urlQueryString, response;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            path = new URL(url).pathname;
            urlQueryString = (0, _util.generateTraceURLString)([path]);
            _context.next = 4;
            return (0, _util.getOrganizationVulnerabilityIds)(urlQueryString, application.id);

          case 4:
            response = _context.sent;


            console.log("evaluating single url from xhr request to", path);
            this.storeTraces(response.traces, tab, application);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

// Vulnerability.highlightForms = function(traceUrls) {
//   // NOTE: How do we know it's the forms that are vulnerable?
//   chrome.tabs.sendMessage(tab.id, {
//     action: HIGHLIGHT_VULNERABLE_FORMS,
//     traceUrls,
//   });
// }

/**
 * storeTraces - store traces associated with a tab url
 *
 * @param  {Array} foundTraces - trace ids of vulnerabilities found
 * @param  {Object} tab - Gives the state of the current tab
 * @return {Promise}
 */
Vulnerability.storeTraces = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(traces, tab, application) {
    var resetXHRRequests = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {
      return null;
    };
    var tabPath, vulnerableTab, storedTabs, newTraces;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            tabPath = new URL(tab.url).pathname;
            vulnerableTab = new _VulnerableTab2.default(tabPath, application.name, traces);
            _context2.next = 4;
            return vulnerableTab.getStoredTab();

          case 4:
            storedTabs = _context2.sent;

            if (!(traces.length !== 0)) {
              _context2.next = 12;
              break;
            }

            if (storedTabs && storedTabs[vulnerableTab.id] && !(0, _util.isEmptyObject)(storedTabs[vulnerableTab.id])) {
              newTraces = storedTabs[vulnerableTab.id].concat(traces);

              vulnerableTab.setTraceIDs(newTraces);
            }

            _context2.next = 9;
            return vulnerableTab.storeTab();

          case 9:
            storedTabs[vulnerableTab.id] = _context2.sent;
            _context2.next = 19;
            break;

          case 12:
            if (!(traces.length === 0 && vulnerableTab.traceIDs.length > 0)) {
              _context2.next = 16;
              break;
            }

            return _context2.abrupt('return');

          case 16:
            if (!(!storedTabs || !storedTabs[vulnerableTab.id])) {
              _context2.next = 19;
              break;
            }

            (0, _util.updateTabBadge)(tab, "0", _util.CONTRAST_RED);
            return _context2.abrupt('return');

          case 19:

            (0, _util.updateTabBadge)(tab, storedTabs[vulnerableTab.id].length.toString(), _util.CONTRAST_RED);
            resetXHRRequests();

          case 21:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * removeVulnerabilitiesFromStorage - removes all trace ids from storage
 *
 * @return {Promise} - returns a promise for localhronous execution
 */
Vulnerability.removeVulnerabilitiesFromStorage = function () {
  console.log("removing traces from storage");
  return new _promise2.default(function (resolve, reject) {
    chrome.storage.local.remove(_util.STORED_TRACES_KEY, function () {
      if (chrome.runtime.lastError) {
        reject(new Error(chrome.runtime.lastError));
      }

      resolve();
    });
  });
};

exports.default = Vulnerability;