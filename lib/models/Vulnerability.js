'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _util = require('../util.js');

var _VulnerableTab = require('./VulnerableTab.js');

var _VulnerableTab2 = _interopRequireDefault(_VulnerableTab);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Vulnerability() {}

// NOTE: URL Length Maximum - https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
// NOTE: If urlQueryString length is 0 it will return all app trace ids
function isTooLong(queryString) {
  if (queryString.length > 2000 || queryString.length === 0) {
    return true;
  }
  return false;
}

/**
 * evaluateVulnerabilities - method used by tab url, xhr and form actions to check TS for vulnerabilities
 *
 * @param  {Boolean} hasCredentials if the user has credentialed the extension
 * @param  {Object}  tab            Gives the state of the current tab
 * @param  {Array}   traceUrls     the urls that will be queried to TS
 * @return {void}
 */
Vulnerability.evaluateVulnerabilities = function (hasCredentials, tab, traceUrls, application, formTraces, resetXHRRequests) {
  var _this = this;

  var urlQueryString = (0, _util.generateTraceURLString)(traceUrls);
  if (isTooLong(urlQueryString, traceUrls)) return;

  (0, _util.getOrganizationVulnerabilityIds)(urlQueryString, application.id).then(function (json) {
    if (!json || !json.traces) {
      (0, _util.updateExtensionIcon)(tab, 1);
      (0, _util.updateTabBadge)(tab, '', _util.CONTRAST_GREEN);
      throw new Error("Error getting json from app trace ids");
    }
    // this.highlightForms(traceUrls);
    _this.storeTraces((0, _util.deDupeArray)(json.traces.concat(formTraces)), tab, application, resetXHRRequests);
  }).catch(function () {
    (0, _util.updateExtensionIcon)(tab, 1);
    // updateTabBadge(tab, '');
    (0, _util.updateTabBadge)(tab, "!", _util.CONTRAST_RED);
    throw new Error("Error getting organization vulnerability ids");
  });
};

Vulnerability.evaluateFormActions = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(actions, tab, application) {
    var paths, queryStrings, queries, results;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!actions || actions.length === 0)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt('return', []);

          case 2:
            paths = actions.map(function (a) {
              return new URL(a).pathname;
            });
            queryStrings = paths.map(function (path) {
              return (0, _util.generateTraceURLString)([path]);
            });
            queries = queryStrings.map(function (qs) {
              return (0, _util.getOrganizationVulnerabilityIds)(qs, application.id);
            });
            _context.next = 7;
            return _promise2.default.all(queries);

          case 7:
            results = _context.sent;
            return _context.abrupt('return', results.map(function (res, i) {
              res.action = actions[i];
              return res;
            }));

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Vulnerability - description
 *
 * @param  {type} requestURL  description
 * @param  {type} tab         description
 * @param  {type} application description
 * @returns {type}             description
 */
Vulnerability.evaluateSingleURL = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(requestURL, tab, application) {
    var path, urlQueryString, response;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            path = new URL(requestURL).pathname;
            urlQueryString = (0, _util.generateTraceURLString)([path]);
            _context2.next = 4;
            return (0, _util.getOrganizationVulnerabilityIds)(urlQueryString, application.id);

          case 4:
            response = _context2.sent;

            if (response && response.traces) {
              this.storeTraces(response.traces, tab, application);
            }

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * @description - Send message to highlight vulnerable forms on DOM
 *
 * @param  {type} tab         description
 * @param  {type} formActions description
 * @returns {type}             description
 */
Vulnerability.highlightForms = function (tab, formActions) {
  chrome.tabs.sendMessage(tab.id, {
    action: _util.HIGHLIGHT_VULNERABLE_FORMS,
    formActions: formActions
  });
};

/**
 * storeTraces - store traces associated with a tab url
 *
 * @param  {Array} foundTraces - trace ids of vulnerabilities found
 * @param  {Object} tab - Gives the state of the current tab
 * @return {Promise}
 */
Vulnerability.storeTraces = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(traces, tab, application) {
    var resetXHRRequests = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var tabPath, vulnerableTab, appTabs, newTraces;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            tabPath = _VulnerableTab2.default.buildTabPath(tab.url);
            vulnerableTab = new _VulnerableTab2.default(tabPath, application.name, traces);
            _context3.next = 4;
            return vulnerableTab.getStoredTab();

          case 4:
            appTabs = _context3.sent;

            if (!(appTabs && appTabs[vulnerableTab.vulnTabId] && Array.isArray(appTabs[vulnerableTab.vulnTabId]))) {
              _context3.next = 10;
              break;
            }

            newTraces = appTabs[vulnerableTab.vulnTabId].concat(traces);

            vulnerableTab.setTraceIDs(newTraces);
            _context3.next = 12;
            break;

          case 10:
            if (!(appTabs && appTabs[vulnerableTab.vulnTabId] && !Array.isArray(appTabs[vulnerableTab.vulnTabId]))) {
              _context3.next = 12;
              break;
            }

            throw new Error("Vulnerabilities not stored properly, should have received array.");

          case 12:
            _context3.next = 14;
            return vulnerableTab.storeTab();

          case 14:
            appTabs = _context3.sent;


            try {
              (0, _util.updateExtensionIcon)(tab, 0);
              (0, _util.updateTabBadge)(tab, appTabs[vulnerableTab.vulnTabId].length.toString(), _util.CONTRAST_RED);
            } catch (e) {
              e;
            }
            if (resetXHRRequests) resetXHRRequests();

          case 17:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function (_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();

/**
 * removeVulnerabilitiesFromStorage - removes all trace ids from storage
 *
 * @return {Promise} - returns a promise for localhronous execution
 */
Vulnerability.removeVulnerabilitiesFromStorage = function () {
  return new _promise2.default(function (resolve, reject) {
    chrome.storage.local.remove(_util.STORED_TRACES_KEY, function () {
      if (chrome.runtime.lastError) {
        reject(new Error(chrome.runtime.lastError));
      }

      resolve();
    });
  });
};

exports.default = Vulnerability;